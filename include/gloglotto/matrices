/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of gloglotto - https://github.com/meh/gloglotto
 *
 * gloglotto is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gloglotto is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gloglotto. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _GLOGLOTTO_MATRICES_H
#define _GLOGLOTTO_MATRICES_H

#include <gloglotto/math>
#include <gloglotto/exception>

namespace gloglotto
{
	template <int Size, class Matrix>
	class matrices
	{
		public:
			static constexpr int accessible_size = Size;
			typedef Matrix   accessible_type;


		public:
			typedef iterator::accessible<matrices<Size, Matrix>, Matrix&, true> const_iterator;
			typedef iterator::accessible<matrices<Size, Matrix>, Matrix&>       iterator;

			typedef typename Matrix::type type;
			static constexpr int bytes = Matrix::size * Size;

			static constexpr int rows     = Matrix::rows;
			static constexpr int columns  = Matrix::columns;
			static constexpr int elements = Matrix::elements;

		public:
			/* Create a matrix array with everything set to 0.
			 */
			matrices (void);

			/* Wrap a pointer containing an array of matrices.
			 */
			matrices (type* pointer);

			/* Create a matrix array from another one.
			 */
			matrices (matrices<Size, Matrix> const& from);

			/* Create a matrix array from the state of the passed rvalue matrix array.
			 */
			matrices (matrices<Size, Matrix>&& from);

			/* Create a matrix array from an initializer list.
			 */
			matrices (std::initializer_list<std::initializer_list<std::initializer_list<type>>> list) throw (std::invalid_argument);

			/* Destroy the data if it's not a wrapper.
			 */
			~matrices (void);

			/* Copy the data present in the passed pointer.
			 */
			matrices<Size, Matrix>& operator = (type const* data);

			/* Copy the contents of the passed matrix array.
			 */
			matrices<Size, Matrix>& operator = (matrices<Size, Matrix> const& from);

			/* Swap with the passed temporary matrix array.
			 */
			matrices<Size, Matrix>& operator = (matrices<Size, Matrix>&& from);

			/* Copy the data passed from the initializer list.
			 */
			matrices<Size, Matrix>& operator = (std::initializer_list<std::initializer_list<std::initializer_list<type>>> list) throw (std::invalid_argument);

			/* Check if the matrix array owns the pointer.
			 */
			bool owner (void) const;

			/* Tell the matrix array to own the pointer.
			 */
			matrices<Size, Matrix>& own (void);

			/* Tell the matrix array to disown the pointer.
			 */
			matrices<Size, Matrix>& disown (void);

			/* Swap the state with another matrix array.
			 */
			matrices<Size, Matrix>& swap (matrices<Size, Matrix>& other);

			/* Preallocate all wrapping matrices.
			 */
			matrices<Size, Matrix>& preallocate (void);

			/* Get the matrix array size.
			 */
			size_t size (void) const;

			/* Return a const matrix from the array.
			 */
			Matrix const& operator [] (size_t index) const throw (std::out_of_range);

			/* Return a const iterator to the beginning of the matrix array.
			 */
			const_iterator begin (void) const;

			/* Return a const iterator to the end of the matrix array.
			 */
			const_iterator end (void) const;

			/* Access a matrix in the array.
			 */
			Matrix& operator [] (size_t index) throw (std::out_of_range);

			/* Return an iterator to the beginning of the matrix array.
			 */
			iterator begin (void);

			/* Return an iterator to the end of the matrix array.
			 */
			iterator end (void);

			template <int SliceSize>
			matrices<SliceSize, Matrix> slice (int offset = 0) throw (std::out_of_range);

			/* Return the wrapped raw pointer (row major).
			 */
			type* operator & (void);

			/* Return the wrapped constant raw pointer (row major).
			 */
			type const* operator & (void) const;

		private:
			type* _data;
			bool  _owner;

			mutable Matrix** _matrices;
	};
}

#include <gloglotto/matrices.tpp>

#endif
