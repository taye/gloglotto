/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of gloglotto - https://github.com/meh/gloglotto
 *
 * gloglotto is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gloglotto is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gloglotto. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _GLOGLOTTO_IMAGE_RG_H
#define _GLOGLOTTO_IMAGE_RG_H

#include <gloglotto/headers>
#include <gloglotto/exception>
#include <gloglotto/iterator>
#include <gloglotto/image>

namespace gloglotto
{
	namespace image
	{
		namespace format
		{
			namespace traits
			{
				template <int Depth, typename Type, bool Normalized>
				struct rg;

				#define rg(size, type, normalized, gl) \
					template <> \
					struct rg<size, type, normalized> \
					{ \
						enum : unsigned { \
							depth    = size, \
							bytes    = (size * 2) / 8, \
							constant = gl \
						}; \
					}

					rg(8,  unsigned, true, GL_RG8);
					rg(16, unsigned, true, GL_RG16);
					rg(32, unsigned, true, GL_RG);

					rg(8,  int, true, GL_RG8_SNORM);
					rg(16, int, true, GL_RG16_SNORM);
					rg(32, int, true, GL_RG_SNORM);

					rg(16, float, false, GL_RG16F);
					rg(32, float, false, GL_RG32F);

					rg(8,  unsigned, false, GL_RG8UI);
					rg(16, unsigned, false, GL_RG16UI);
					rg(32, unsigned, false, GL_RG32UI);

					rg(8,  int, false, GL_RG8I);
					rg(16, int, false, GL_RG16I);
					rg(32, int, false, GL_RG32I);
				#undef rg
			}

			template <int Depth, typename Type = unsigned, bool Normalized = true>
			class rg : public internal
			{
				public:
					enum : unsigned {
						depth    = traits::rg<Depth, Type, Normalized>::depth,
						bytes    = traits::rg<Depth, Type, Normalized>::bytes,
						constant = traits::rg<Depth, Type, Normalized>::constant
					};

					struct value
					{
						unsigned r : Depth;
						unsigned g : Depth;
					};

				public:
					typedef iterator::accessible<rg<Depth, Type, Normalized>, value*, true> const_iterator;
					typedef iterator::accessible<rg<Depth, Type, Normalized>, value*>       iterator;

				public:
					rg (size_t size);

					rg (void* buffer, size_t size);

					size_t size (void) const;

					value const* operator [] (size_t index) const throw (std::out_of_range);

					/* Return a const iterator to the beginning of the image.
					 */
					const_iterator begin (void) const;

					/* Return a const iterator to the end of the image.
					 */
					const_iterator end (void) const;

					value* operator [] (size_t index) throw (std::out_of_range);

					/* Return an iterator to the beginning of the image.
					 */
					iterator begin (void);

					/* Return an iterator to the end of the image.
					 */
					iterator end (void);

				private:
					size_t _size;
			};
		}
	}
}

#include <gloglotto/formats/rg.tpp>

#endif
