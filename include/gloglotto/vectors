/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of gloglotto - https://github.com/meh/gloglotto
 *
 * gloglotto is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gloglotto is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gloglotto. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _GLOGLOTTO_VECTORS_H
#define _GLOGLOTTO_VECTORS_H

#include <gloglotto/vector>
#include <gloglotto/exception>

namespace gloglotto
{
	template <int Size, class Vector>
	class vectors
	{
		public:
			template <int SliceSize>
			class sub
			{
				public:
					typedef iterator::accessible<vectors<Size, Vector>::sub<SliceSize>, Vector&, true> const_iterator;
					typedef iterator::accessible<vectors<Size, Vector>::sub<SliceSize>, Vector&>       iterator;

					typedef typename Vector::type type;
					static constexpr int bytes = Vector::size * SliceSize;

					static constexpr int elements = Vector::elements;

				public:
					sub (vectors<Size, Vector>* parent, int offset, int stride);

					/* Get the slice size.
					 */
					size_t size (void) const;

					/* Access a constant vector in the array.
					 */
					Vector const& operator [] (size_t index) const throw (std::out_of_range);

					/* Return an iterator to the beginning of the vector array.
					 */
					const_iterator begin (void) const;

					/* Return an iterator to the end of the vector array.
					 */
					const_iterator end (void) const;

					/* Access a vector in the array.
					 */
					Vector& operator [] (size_t index) throw (std::out_of_range);

					/* Return an iterator to the beginning of the vector array.
					 */
					iterator begin (void);

					/* Return an iterator to the end of the vector array.
					 */
					iterator end (void);

					/* Return a new vector array multiplied by the matrix.
					 */
					vectors<SliceSize, Vector> operator * (matrix<elements, elements, type> const& other) const;

					/* Multiply the slice of vector array in place by the matrix.
					 */
					sub<SliceSize>& operator *= (matrix<elements, elements, type> const& other);

				private:
					vectors<Size, Vector>* _parent;

					int _offset = 0;
					int _stride = 0;
			};

		public:
			typedef iterator::accessible<vectors<Size, Vector>, Vector&, true> const_iterator;
			typedef iterator::accessible<vectors<Size, Vector>, Vector&>       iterator;

			typedef typename Vector::type type;
			static constexpr int bytes = Vector::size * Size;

			static constexpr int elements = Vector::elements;

		public:
			/* Create a vector array with everything set to 0.
			 */
			vectors (void);

			/* Wrap a pointer containing an array of vectors.
			 */
			vectors (type* pointer);

			/* Create a vector array from a vector array slice.
			 */
			vectors (sub<Size> const& slice);

			/* Create a vector array from another one.
			 */
			vectors (vectors<Size, Vector> const& from);

			/* Create a vector array from the state of the passed rvalue vector array.
			 */
			vectors (vectors<Size, Vector>&& from);

			/* Create a vector array from an initializer list.
			 */
			vectors (std::initializer_list<std::initializer_list<type>> list) throw (std::invalid_argument);

			/* Destroy the data if it's not a wrapper.
			 */
			~vectors (void);

			/* Copy the data present in the passed pointer.
			 */
			vectors<Size, Vector>& operator = (type const* data);

			/* Copy the data wrapped by the slice.
			 */
			vectors<Size, Vector>& operator = (sub<Size> const& slice);

			/* Copy the contents of the passed vector array.
			 */
			vectors<Size, Vector>& operator = (vectors<Size, Vector> const& from);

			/* Swap with the passed temporary vector array.
			 */
			vectors<Size, Vector>& operator = (vectors<Size, Vector>&& from);

			/* Copy the data passed from the initializer list.
			 */
			vectors<Size, Vector>& operator = (std::initializer_list<std::initializer_list<type>> list) throw (std::invalid_argument);

			/* Check if the vector array owns the pointer.
			 */
			bool owner (void) const;

			/* Tell the vector array to own the pointer.
			 */
			vectors<Size, Vector>& own (void);

			/* Tell the vector array to disown the pointer.
			 */
			vectors<Size, Vector>& disown (void);

			/* Swap the state with another vector array.
			 */
			vectors<Size, Vector>& swap (vectors<Size, Vector>& other);

			/* Preallocate all wrapping vectors.
			 */
			vectors<Size, Vector>& preallocate (void);

			/* Get the vector array size.
			 */
			size_t size (void) const;

			/* Access a constant vector in the array.
			 */
			Vector const& operator [] (size_t index) const throw (std::out_of_range);

			/* Return an iterator to the beginning of the vector array.
			 */
			const_iterator begin (void) const;

			/* Return an iterator to the end of the vector array.
			 */
			const_iterator end (void) const;

			/* Access a vector in the array.
			 */
			Vector& operator [] (size_t index) throw (std::out_of_range);

			/* Return an iterator to the beginning of the vector array.
			 */
			iterator begin (void);

			/* Return an iterator to the end of the vector array.
			 */
			iterator end (void);

			template <int SliceSize>
			sub<SliceSize> slice (int offset = 0, int stride = 0) throw (std::out_of_range);

			/* Return a new vector array multiplied by the matrix.
			 */
			vectors<Size, Vector> operator * (matrix<elements, elements, type> const& other) const;

			/* Multiply the vector array in place by the matrix.
			 */
			vectors<Size, Vector>& operator *= (matrix<elements, elements, type> const& other);

			/* Return the wrapped raw pointer (row major).
			 */
			type* operator & (void);

			/* Return the wrapped constant raw pointer (row major).
			 */
			type const* operator & (void) const;

		private:
			type* _data;
			bool  _owner;

			mutable Vector** _vectors;
	};
}

#include <gloglotto/vectors.tpp>

#endif
