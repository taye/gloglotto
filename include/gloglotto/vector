/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of gloglotto - https://github.com/meh/gloglotto
 *
 * gloglotto is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gloglotto is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gloglotto. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _GLOGLOTTO_VECTOR_H
#define _GLOGLOTTO_VECTOR_H

#include <stdexcept>
#include <type_traits>

#include <gloglotto/iterator>

namespace gloglotto
{
	template<int Rows, int Columns, typename Type>
	class matrix;

	/* Class to handle vectors like GLSL.
	 *
	 * This means a vector abstracts a GLSL vector type, including size and type and
	 * the operations you can do on them act as close as possible to what GLSL would do.
	 */
	template <int Size = 3, typename Type = float>
	class vector
	{
		static_assert(Size >= 1 && Size <= 4, "only 1, 2, 3, or 4 elements vectors");

		static_assert(std::is_same<float, Type>::value ||
		              std::is_same<double, Type>::value ||
		              std::is_same<int, Type>::value ||
		              std::is_same<unsigned, Type>::value ||
		              std::is_same<bool, Type>::value, "only float, double, int, unsigned and bool");

		public:
			typedef iterator::accessible<vector<Size, Type>, Type&, true> const_iterator;
			typedef iterator::accessible<vector<Size, Type>, Type&>       iterator;

			typedef Type type;
			static constexpr int bytes = Size * sizeof(Type);

			static constexpr int elements = Size;

		public:
			/* Create a vector with every element set to 0.
			 */
			vector (Type value = 0);

			/* Create a vector from the copy of the contents of the passed vector.
			 */
			vector (vector<Size, Type> const& from);

			/* Create a vector from the state of the passed rvalue vector array.
			 */
			vector (vector<Size, Type>&& from);

			/* Create a vector from an initializer list.
			 */
			vector (std::initializer_list<Type> list) throw (std::invalid_argument);

			/* Create a wrapping vector around a pointer.
			 */
			vector (Type* data);

			/* Destroy the data if it's not a wrapping vector.
			 */
			~vector (void);

			/* Set all elements to the passed value.
			 */
			vector<Size, Type>& operator = (Type value);

			/* Copy the contents of the passed vector.
			 */
			vector<Size, Type>& operator = (vector<Size, Type> const& from);

			/* Swap with the passed temporary vector.
			 */
			vector<Size, Type>& operator = (vector<Size, Type>&& from);

			/* Copy the data present in the passed pointer.
			 */
			vector<Size, Type>& operator = (const Type* data);

			/* Copy the data passed from the initializer list.
			 */
			vector<Size, Type>& operator = (std::initializer_list<Type> list) throw (std::invalid_argument);

			/* Check if the vector owns the pointer.
			 */
			bool owner (void) const;

			/* Tell the vector to own the pointer.
			 */
			vector<Size, Type>& own (void);

			/* Tell the vector to disown the pointer.
			 */
			vector<Size, Type>& disown (void);

			/* Swap the state with another vector.
			 */
			vector<Size, Type>& swap (vector<Size, Type>& other);

			/* Get the vector size.
			 */
			size_t size (void) const;

			/* Access a constant element of the vector.
			 */
			Type const& operator [] (size_t index) const throw (std::out_of_range);

			/* Return a const iterator to the beginning of the vector.
			 */
			const_iterator begin (void) const;

			/* Return a const iterator to the end of the vector.
			 */
			const_iterator end (void) const;

			/* Access an element of the vector.
			 */
			Type& operator [] (size_t index) throw (std::out_of_range);

			/* Return an iterator to the beginning of the vector.
			 */
			iterator begin (void);

			/* Return an iterator to the end of the vector.
			 */
			iterator end (void);

			template <int OtherSize>
			bool operator == (vector<OtherSize, Type> const& other);

			template <int OtherSize>
			bool operator != (vector<OtherSize, Type> const& other);

			template <int OtherSize>
			bool operator > (vector<OtherSize, Type> const& other);

			template <int OtherSize>
			bool operator >= (vector<OtherSize, Type> const& other);

			template <int OtherSize>
			bool operator < (vector<OtherSize, Type> const& other);

			template <int OtherSize>
			bool operator <= (vector<OtherSize, Type> const& other);

			/* Return the addition of the two vectors.
			 */
			vector<Size, Type> operator + (vector<Size, Type> const& other) const;

			/* Return the addition of the two vectors reusing the other temporary.
			 */
			vector<Size, Type>&& operator + (vector<Size, Type>&& other) const;

			/* Add the other vector in place.
			 */
			vector<Size, Type>& operator += (vector<Size, Type> const& other);

			/* Return the substraction of the two vectors.
			 */
			vector<Size, Type> operator - (vector<Size, Type> const& other) const;

			/* Return the substraction of the two vectors reusing the other temporary.
			 */
			vector<Size, Type>&& operator - (vector<Size, Type>&& other) const;

			/* Substract the other vector in place.
			 */
			vector<Size, Type>& operator -= (vector<Size, Type> const& other);

			/* Return the cross product of the two vectors.
			 */
			vector<3, Type> operator * (vector<3, Type> const& other) const;

			/* Return the cross product of the two vectors reusing the other temporary.
			 */
			vector<3, Type>&& operator * (vector<3, Type>&& other) const;

			/* Cross product the other vector in place.
			 */
			vector<3, Type>& operator *= (vector<3, Type> const& other);

			/* Multiply the vector to a compatible matrix and return another vector.
			 */
			vector<Size, Type> operator * (matrix<Size, Size, Type> const& other) const;

			/* Multiply the vector to a compatible matrix in place.
			 */
			vector<Size, Type>& operator *= (matrix<Size, Size, Type> const& other);

			/* Return the dot product of the two vectors.
			 */
			Type operator ^ (vector<Size, Type> const& oher) const;

			/* Return a scaled vector.
			 */
			vector<Size, Type> operator % (Type scale) const;

			/* Scale the vector in place.
			 */
			vector<Size, Type>& operator %= (Type scale);

			/* Return a normalized vector.
			 */
			vector<Size, Type> operator ! (void) const;

			/* Return the magnitude of the vector.
			 */
			Type magnitude (void) const;

			/* Return the wrapped raw pointer.
			 */
			Type* operator & (void);

			/* Return the wrapped constant raw pointer.
			 */
			Type const* operator & (void) const;

		private:
			Type* _data;
			bool  _owner;
	};

	namespace make
	{
		template <typename Type>
		vector<4, Type> plane_equation (vector<3, Type> const& a, vector<3, Type> const& b, vector<3, Type> const& c);
	}
}

#ifndef NO_IMPLEMENTATION
#include <gloglotto/vector.tpp>
#endif

#endif
